#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include "algos.h"
#include "edge.h"
#include "integer.h"
#include "queue.h"
#include "stack.h"
#include "utils.h"

#define EMPTY -1

static void bottomUpMerge(void **, void **, int, int, int, int (*)(void *, void *));
static void copyArray(void **, void **, int);
static int compareVh(void *, void *);

// Bottom up implementation of merge sort
// Takes in an array of generic values, the size of the array, and a callback function to compare the generic type stored in the array

void mergeSort(void **arr, int n, int (*compare)(void *, void *)) {
    void **work = (void **)malloc(sizeof(void *) * n);
    for (int width = 1; width < n; width *= 2) {
        for (int i = 0; i < n; i += width * 2) {
            bottomUpMerge(arr, work, i, min(i + width, n), min(i + 2 * width, n), compare); 
        }
        copyArray(work, arr, n);
    }
    free(work);
}

// Makes a singleton set for each vertex
void makeAllSets(void **edgeArray, int *vertexArray, int edgeArraySize, SET *set) {
    for (int i = 0; i < edgeArraySize; i++) {
        int vl = getVl(edgeArray[i]);
        int vh = getVh(edgeArray[i]);
        if (vertexArray[vl] == EMPTY) {
            vertexArray[vl] = makeSET(set, newINTEGER(vl));
        }
        if (vertexArray[vh] == EMPTY) {
            vertexArray[vh] = makeSET(set, newINTEGER(vh));
        }
    } 
}

// Runs Kruskal's algorithm on the array of edges and returns a dynamic array containing the minimum spanning tree edges
DA *kruskal(void **edgeArray, int edgeArraySize, int *vertexArray, SET *set) {
    DA *tea = newDA(displayEDGE);
    for (int i = 0; i < edgeArraySize; i++) {
        int u = getVl(edgeArray[i]);
        int v = getVh(edgeArray[i]);
        if (findSET(set, vertexArray[u]) != findSET(set, vertexArray[v])) {
            insertDA(tea, edgeArray[i]);
            unionSET(set, vertexArray[u], vertexArray[v]);
        }                
    }
    return tea;
}

// Generates an adjacency list of the edges in the minimum spanning tree
DA **buildAdjList(void **arr, int size, int teaSize) {
    DA **adjList = (DA **)malloc(sizeof(DA *) * (size));
    for (int i = 0; i < size; i++) {
        adjList[i] = newDA(displayEDGE);
    }
    for (int i = 0; i < teaSize; i++) {
        int vl = getVl(arr[i]);
        int vh = getVh(arr[i]);
        int weight = getWeight(arr[i]);
        insertDA(adjList[vl], arr[i]);
        EDGE *edge = newEDGE(vh, vl, weight);
        insertDA(adjList[vh], edge);
    }
    return adjList;
}

// Runs breadth-first search on the MST adjacency list
void BFS(FILE *fp, DA **adjList, int n) {
    bool *visited = (bool *)malloc(sizeof(bool) * n);
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }
    for (int i = 0; i < n; i++) {
        if (sizeDA(adjList[i]) > 0 && !visited[i]) {
            unsigned long long totalWeight = 0;
            QUEUE *vertexQueue = newQUEUE(displayINTEGER);
            QUEUE *parentQueue = newQUEUE(displayINTEGER);
            QUEUE *weightQueue = newQUEUE(displayINTEGER);
            visited[i] = true;
            enqueue(vertexQueue, newINTEGER(i)); 
            int level = 0;
            while (sizeQUEUE(vertexQueue) > 0) {
                int levelNodes = sizeQUEUE(vertexQueue);
                fprintf(fp, "%d: ", level);
                while (levelNodes > 0) {
                    int vertex = getINTEGER(dequeue(vertexQueue)); 
                    if (level == 0) {
                        fprintf(fp, "%d", vertex);
                    }
                    else {
                        int parent = getINTEGER(dequeue(parentQueue));
                        int weight = getINTEGER(dequeue(weightQueue));
                        fprintf(fp, "%d(%d)%d", vertex, parent, weight);
                        if (levelNodes > 1) {
                            fprintf(fp, " ");
                        }
                        totalWeight += weight;  
                    }
                    DA *edgeDA = newDA(displayEDGE);
                    for (int j = 0; j < sizeDA(adjList[vertex]); j++) {
                        EDGE *edge = getDA(adjList[vertex], j);
                        insertDA(edgeDA, edge);
                    }
                    int arrLength = sizeDA(edgeDA);
                    void **edgeVoid = extractDA(edgeDA);
                    mergeSort(edgeVoid, arrLength, compareVh);
                    for (int i = 0; i < arrLength; i++) {
                        EDGE *edge = edgeVoid[i];
                        int vh = getVh(edge);
                        int weight = getWeight(edge);
                        if (!visited[vh]) {
                            visited[vh] = true;
                            enqueue(vertexQueue, newINTEGER(vh));
                            enqueue(parentQueue, newINTEGER(vertex));
                            enqueue(weightQueue, newINTEGER(weight));
                        }
                    }
                    levelNodes--;
                }
                level++;
                fprintf(fp, "\n");
            }
            fprintf(fp, "total weight: %llu\n----\n", totalWeight);
        }
    }
}

// Helper function for merge sort
static void bottomUpMerge(void **arr, void **work, int l, int r, int end, int (*compare)(void *, void *)) {
    int i = l, j = r;
    for (int k = l; k < end; k++) {
        if (i < r && (j >= end || compare(arr[i], arr[j]) <= 0)) {
            work[k] = arr[i];
            i++;
        }
        else {
            work[k] = arr[j];
            j++;
        }
    }
}

// Also a helper function for merge sort
static void copyArray(void **work, void **arr, int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = work[i];
    }
}

static int compareVh(void *edgeA, void *edgeB) {
    EDGE *a = edgeA;
    EDGE *b = edgeB;
    return getVh(a) - getVh(b);
}
